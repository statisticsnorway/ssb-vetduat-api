name: $(Build.SourceBranch)-$(date:yyyyMMdd)$(rev:.r)
# Pipeline triggers on any branch and tag
trigger:
  branches:
    include:
      - '*'
  tags:
    include:
      - '*'
# Pipeline will be run on this base image
pool:
  vmImage: 'ubuntu-latest'

# Variables global to this pipeline
# https://docs.microsoft.com/en-us/azure/devops/pipelines/process/variables
variables:
  # Variables defined in Pipelines->Library->Variable Groups in your project in
  # Azure Pipelines
  #- group: Hemmeligheter
  # Variables defined here
  - name: fullSha
    value: '$(Build.SourceVersion)'
  - name: repoName
    value: 'prod-bip/ssb/forbruk/ssb-vetduat-api'
  - name:  MAVEN_CACHE_FOLDER
    value: $(Pipeline.Workspace)/.m2/repository
  - name: MAVEN_OPTS
    value: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

# Job which runs mvn test and verify, Sonar Analysis (if branch is master), mvn install,
# builds Docker image, pushes this to GCR and checks for any image vulnerabilities
jobs:
  - job: buildTestBuildPush
    displayName: 'Test/build app'
    # Job condition: Run these jobs on any branch, but not on tags
    condition: not(startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    # Steps in this Job
    steps:
      # Authenticate Maven to Nexus using predefined Service Connections
      # (Project Settings->Pipelines->Service Connections)
      - task: MavenAuthenticate@0
        displayName: 'Maven authenticate'
        inputs:
          mavenServiceConnections: 'mvnSsbBipPublic, mvnSsbBipReleases, mvnSsbBipSnapshots'

      # Maven test and verify
      - task: Maven@3
        displayName: 'Maven test and verify'
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'verify test'
          options: '-P ssb-bip,coverage --batch-mode'
          publishJUnitResults: true
          testResultsFiles: '**/TEST-*.xml'
          codeCoverageToolOption: 'JaCoCo'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: true
          pmdRunAnalysis: true

      # Run Maven Sonar Analysis
      - task: Maven@3
        displayName: 'Maven Sonar Analysis'
        # Task condition: We have community edition of SonarQube which only scans master-branch so
        # it makes no sense running this tag when branch is other than master
        condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
        inputs:
          mavenPomFile: 'pom.xml'
          goals: 'sonar:sonar'
          options: '-X -Dsonar.host.url=$(SONAR_HOST) -Dsonar.login=$(SONAR_TOKEN) sonar:sonar -P ssb-bip,coverage -Dmaven.javadoc.skip=true --batch-mode '
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          mavenVersionOption: 'Default'
          mavenOptions: '-Xmx3072m'
          mavenAuthenticateFeed: false
          effectivePomSkip: false
          sonarQubeRunAnalysis: false
          checkStyleRunAnalysis: false
          pmdRunAnalysis: false
          findBugsRunAnalysis: false

      # Deploy artifact to Nexus
      - task: Maven@3
        displayName: 'Maven install and deploy'
        inputs:
          mavenPomFile: 'pom.xml'
          mavenOptions: '-Xmx3072m'
          javaHomeOption: 'JDKVersion'
          jdkVersionOption: '1.11'
          jdkArchitectureOption: 'x64'
          publishJUnitResults: false
          testResultsFiles: '**/TEST-*.xml'
          goals: 'deploy'
          options: '-DskipTests=true -Dmaven.javadoc.skip=true -P ssb-bip --batch-mode'
---
kind: secret
name: sonar_host
get:
  path: drone-sonarqube-configuration
  name: url
---
kind: secret
name: sonar_token
get:
  path: drone-sonarqube-configuration
  name: token
